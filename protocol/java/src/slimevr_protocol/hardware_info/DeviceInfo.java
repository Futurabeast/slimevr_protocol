// automatically generated by the FlatBuffers compiler, do not modify

package slimevr_protocol.hardware_info;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class DeviceInfo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static DeviceInfo getRootAsDeviceInfo(ByteBuffer _bb) { return getRootAsDeviceInfo(_bb, new DeviceInfo()); }
  public static DeviceInfo getRootAsDeviceInfo(ByteBuffer _bb, DeviceInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DeviceInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int mcuId() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public int imuIds(int j) { int o = __offset(6); return o != 0 ? bb.getShort(__vector(o) + j * 2) & 0xFFFF : 0; }
  public int imuIdsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ShortVector imuIdsVector() { return imuIdsVector(new ShortVector()); }
  public ShortVector imuIdsVector(ShortVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer imuIdsAsByteBuffer() { return __vector_as_bytebuffer(6, 2); }
  public ByteBuffer imuIdsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 2); }
  public String displayName() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer displayNameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer displayNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public String model() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer modelAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer modelInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public String manufacturer() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer manufacturerAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer manufacturerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  public String firmwareVersion() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer firmwareVersionAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer firmwareVersionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  public slimevr_protocol.datatypes.MacAddress macAddress() { return macAddress(new slimevr_protocol.datatypes.MacAddress()); }
  public slimevr_protocol.datatypes.MacAddress macAddress(slimevr_protocol.datatypes.MacAddress obj) { int o = __offset(16); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }

  public static void startDeviceInfo(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addMcuId(FlatBufferBuilder builder, int mcuId) { builder.addShort(0, (short) mcuId, (short) 0); }
  public static void addImuIds(FlatBufferBuilder builder, int imuIdsOffset) { builder.addOffset(1, imuIdsOffset, 0); }
  public static int createImuIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(2, data.length, 2); for (int i = data.length - 1; i >= 0; i--) builder.addShort((short) data[i]); return builder.endVector(); }
  public static void startImuIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(2, numElems, 2); }
  public static void addDisplayName(FlatBufferBuilder builder, int displayNameOffset) { builder.addOffset(2, displayNameOffset, 0); }
  public static void addModel(FlatBufferBuilder builder, int modelOffset) { builder.addOffset(3, modelOffset, 0); }
  public static void addManufacturer(FlatBufferBuilder builder, int manufacturerOffset) { builder.addOffset(4, manufacturerOffset, 0); }
  public static void addFirmwareVersion(FlatBufferBuilder builder, int firmwareVersionOffset) { builder.addOffset(5, firmwareVersionOffset, 0); }
  public static void addMacAddress(FlatBufferBuilder builder, int macAddressOffset) { builder.addStruct(6, macAddressOffset, 0); }
  public static int endDeviceInfo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DeviceInfo get(int j) { return get(new DeviceInfo(), j); }
    public DeviceInfo get(DeviceInfo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

