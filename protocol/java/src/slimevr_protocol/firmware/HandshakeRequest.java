// automatically generated by the FlatBuffers compiler, do not modify

package slimevr_protocol.firmware;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class HandshakeRequest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static HandshakeRequest getRootAsHandshakeRequest(ByteBuffer _bb) { return getRootAsHandshakeRequest(_bb, new HandshakeRequest()); }
  public static HandshakeRequest getRootAsHandshakeRequest(ByteBuffer _bb, HandshakeRequest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public HandshakeRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public slimevr_protocol.hardware_info.DeviceInfo deviceInfo() { return deviceInfo(new slimevr_protocol.hardware_info.DeviceInfo()); }
  public slimevr_protocol.hardware_info.DeviceInfo deviceInfo(slimevr_protocol.hardware_info.DeviceInfo obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createHandshakeRequest(FlatBufferBuilder builder,
      int deviceInfoOffset) {
    builder.startTable(1);
    HandshakeRequest.addDeviceInfo(builder, deviceInfoOffset);
    return HandshakeRequest.endHandshakeRequest(builder);
  }

  public static void startHandshakeRequest(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addDeviceInfo(FlatBufferBuilder builder, int deviceInfoOffset) { builder.addOffset(0, deviceInfoOffset, 0); }
  public static int endHandshakeRequest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public HandshakeRequest get(int j) { return get(new HandshakeRequest(), j); }
    public HandshakeRequest get(HandshakeRequest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

