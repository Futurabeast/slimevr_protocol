// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Quat } from '../../slimevr-protocol/datatypes/quat';
import { Vec3f } from '../../slimevr-protocol/datatypes/vec3f';


export class SensorReport {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):SensorReport {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSensorReport(bb:flatbuffers.ByteBuffer, obj?:SensorReport):SensorReport {
  return (obj || new SensorReport()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSensorReport(bb:flatbuffers.ByteBuffer, obj?:SensorReport):SensorReport {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SensorReport()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

orientation(index: number, obj?:Quat):Quat|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Quat()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;
}

orientationLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

rawTransAccel(index: number, obj?:Vec3f):Vec3f|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Vec3f()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) : null;
}

rawTransAccelLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

rawRotVel(index: number, obj?:Vec3f):Vec3f|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Vec3f()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) : null;
}

rawRotVelLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startSensorReport(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addOrientation(builder:flatbuffers.Builder, orientationOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, orientationOffset, 0);
}

static startOrientationVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(16, numElems, 4);
}

static addRawTransAccel(builder:flatbuffers.Builder, rawTransAccelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, rawTransAccelOffset, 0);
}

static startRawTransAccelVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(12, numElems, 4);
}

static addRawRotVel(builder:flatbuffers.Builder, rawRotVelOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, rawRotVelOffset, 0);
}

static startRawRotVelVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(12, numElems, 4);
}

static endSensorReport(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSensorReport(builder:flatbuffers.Builder, orientationOffset:flatbuffers.Offset, rawTransAccelOffset:flatbuffers.Offset, rawRotVelOffset:flatbuffers.Offset):flatbuffers.Offset {
  SensorReport.startSensorReport(builder);
  SensorReport.addOrientation(builder, orientationOffset);
  SensorReport.addRawTransAccel(builder, rawTransAccelOffset);
  SensorReport.addRawRotVel(builder, rawRotVelOffset);
  return SensorReport.endSensorReport(builder);
}
}
