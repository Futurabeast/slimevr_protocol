include "commons/misc.fbs";
include "commons/datatypes.fbs";
include "commons/hardware_info.fbs";

namespace slimevr_protocol.server;

// Inbound is from the outside to the server
union InboundUnion {
    ConnectionRequest,
    ResetRequest,
    AssignTrackerRequest,
    ChangeSettingsRequest,
    SettingsRequest,
    SkeletonConfigRequest,
    ChangeSkeletonConfigRequest,
    slimevr_protocol.misc.Acknowledgement,
}

// outbound is from the server to the outside
union OutboundUnion {
    TrackersList,
    SettingsResponse,
    SkeletonConfigResponse,
    slimevr_protocol.misc.Acknowledgement
}


table InboundPacket {
    packet_counter: uint32;
    // If `true`, receipt of this packet should be acknowledged
    acknowledge_me: bool = false;
    packet: InboundUnion;
}

table OutboundPacket {
    packet_counter: uint32;
    // If `true`, receipt of this packet should be acknowledged
    acknowledge_me: bool = false;
    packet: OutboundUnion;
}


table ResetRequest {
    quick: bool;
}


enum ApplicationType: uint8 {
    Other = 0,
    UI,
    OVERLAY,
}

table ConnectionRequest {
    application_type: ApplicationType;

    tracker_list: [TrackerListFeatures];
}

enum TrackerStatus: uint8 {
    NONE = 0,
    DISCONNECTED = 1,
    OK = 2,
    BUSY = 3,
    ERROR = 4,
    OCCLUDED = 5,
}

enum TrackerRole: uint8 {
    NONE = 0,
    WAIST = 1,
    LEFT_FOOT = 2,
    RIGHT_FOOT = 3,
    CHEST = 4,
    LEFT_KNEE = 5,
    RIGHT_KNEE = 6,
    LEFT_ELBOW = 7,
    RIGHT_ELBOW = 8,
    LEFT_SHOULDER = 9,
    RIGHT_SHOULDER = 10,
    LEFT_HAND = 11,
    RIGHT_HAND = 12,
    LEFT_CONTROLLER = 13,
    RIGHT_CONTROLLER = 14,
    HEAD = 15,
    NECK = 16,
    CAMERA = 17,
    KEYBOARD = 18,
    HMD = 19,
    BEACON = 20,
    GENERIC_CONTROLLER = 21
}

enum TrackerPosition: uint8 {
    NONE = 0,
    HMD = 1,
    CHEST = 2,
    WAIST = 3,
    HIP = 4,
    LEFT_LEG = 5,
    RIGHT_LEG = 6,
    LEFT_ANKLE = 7,
    RIGHT_ANKLE = 8,
    LEFT_FOOT = 9,
    RIGHT_FOOT = 10,
    LEFT_CONTROLLER = 11,
    RIGHT_CONTROLLER = 12,
    LEFT_FOREARM = 13,
    RIGHT_FOREARM = 14,
    LEFT_UPPER_ARM = 15,
    RIGHT_UPPER_ARM = 16
}



table TrackerListFeatures {
    interval: uint16;
    complete: bool;
    device_features: DeviceStatusFeatures;
}

table DeviceStatusFeatures {
    name: bool;
    role: bool;
    mounting_rotation: bool;
    rotation: bool;
    position: bool;
    status: bool;
    battery: bool;
    computed: bool;
    signal: bool;
    tps: bool;
    ping: bool;
    editable: bool;
}

table DeviceStatus {
    id: uint8;
    name: string;
    mounting_position: TrackerPosition;
    mounting_rotation: uint16;
    rotation: slimevr_protocol.datatypes.Quat;
    position: slimevr_protocol.datatypes.Vec3f;
    status: TrackerStatus;
    battery: uint8;
    computed: bool;
    signal: int16;
    tps: uint8;
    ping: uint16;
    editable: bool;
}

table TrackersList {
    trackers: [DeviceStatus];
}


table AssignTrackerRequest {
    id: uint8;
    mounting_position: TrackerPosition;
    mounting_rotation: uint16;
}

table SteamVRTrackersSetting {
    waist: bool;
    chest: bool;
    legs: bool;
    knees: bool;
    elbows: bool;
}

enum FilteringType: uint8 {
	NONE = 0,
	INTERPOLATION = 1,
	EXTRAPOLATION = 2
}

table FilteringSettings {
	type: FilteringType;
	intensity: uint8;
	ticks: uint8;
}

table SettingsRequest {}
table SettingsResponse {
	steam_vr_trackers: SteamVRTrackersSetting;
	filtering: FilteringSettings;
}


table ChangeSettingsRequest {
    steam_vr_trackers: SteamVRTrackersSetting;
    filtering: FilteringSettings;
}

enum SkeletonConfigValue: uint8 {
	NONE = 0,
	HEAD = 1,
	NECK = 2,
	TORSO = 3,
	CHEST = 4,
	WAIST = 5,
	HIP_OFFSET = 6,
	HIPS_WIDTH = 7,
	LEGS_LENGTH = 8,
	KNEE_HEIGHT = 9,
	FOOT_LENGTH = 10,
	FOOT_OFFSET = 11,
	SKELETON_OFFSET = 12,
	CONTROLLER_DISTANCE_Z = 13,
	CONTROLLER_DISTANCE_Y = 14,
	ELBOW_DISTANCE = 15,
	UPPER_ARM_DISTANCE = 16
}

table SkeletonPart {
	id: SkeletonConfigValue;
	value: float;
}

table SkeletonConfigRequest {}
table SkeletonConfigResponse {
	skeleton_parts: [SkeletonPart];
}

table ChangeSkeletonConfigRequest {
   	id: SkeletonConfigValue;
   	value: float;
}
